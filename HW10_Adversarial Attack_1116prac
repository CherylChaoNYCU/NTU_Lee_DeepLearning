{"cells":[{"cell_type":"markdown","metadata":{"id":"Q-n2e0BkhEKS"},"source":["# **Homework 10 - Adversarial Attack**\n","\n","Slides: https://reurl.cc/7DDxnD\n","\n","Contact: ntu-ml-2022spring-ta@googlegroups.com\n"]},{"cell_type":"markdown","metadata":{"id":"9RX7iRXrhMA_"},"source":["## Enviroment & Download\n","\n","We make use of [pytorchcv](https://pypi.org/project/pytorchcv/) to obtain CIFAR-10 pretrained model, so we need to set up the enviroment first. We also need to download the data (200 images) which we want to attack."]},{"cell_type":"code","execution_count":15,"metadata":{"id":"d4Lw7urignqP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668607657879,"user_tz":-480,"elapsed":10399,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}},"outputId":"b47053f2-01f5-4158-f4c8-9edc17832c99"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pytorchcv in /usr/local/lib/python3.7/dist-packages (0.0.67)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from pytorchcv) (1.21.6)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from pytorchcv) (2.23.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->pytorchcv) (2022.9.24)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->pytorchcv) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->pytorchcv) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->pytorchcv) (1.24.3)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: imgaug in /usr/local/lib/python3.7/dist-packages (0.4.0)\n","Requirement already satisfied: opencv-python in /usr/local/lib/python3.7/dist-packages (from imgaug) (4.6.0.66)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from imgaug) (7.1.2)\n","Requirement already satisfied: imageio in /usr/local/lib/python3.7/dist-packages (from imgaug) (2.9.0)\n","Requirement already satisfied: Shapely in /usr/local/lib/python3.7/dist-packages (from imgaug) (1.8.5.post1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from imgaug) (3.2.2)\n","Requirement already satisfied: scikit-image>=0.14.2 in /usr/local/lib/python3.7/dist-packages (from imgaug) (0.18.3)\n","Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from imgaug) (1.21.6)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from imgaug) (1.15.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from imgaug) (1.7.3)\n","Requirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.7/dist-packages (from scikit-image>=0.14.2->imgaug) (2.6.3)\n","Requirement already satisfied: tifffile>=2019.7.26 in /usr/local/lib/python3.7/dist-packages (from scikit-image>=0.14.2->imgaug) (2021.11.2)\n","Requirement already satisfied: PyWavelets>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from scikit-image>=0.14.2->imgaug) (1.3.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->imgaug) (3.0.9)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->imgaug) (2.8.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->imgaug) (1.4.4)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->imgaug) (0.11.0)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib->imgaug) (4.1.1)\n","--2022-11-16 14:07:32--  https://github.com/DanielLin94144/ML-attack-dataset/files/8167812/data.zip\n","Resolving github.com (github.com)... 20.205.243.166\n","Connecting to github.com (github.com)|20.205.243.166|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://objects.githubusercontent.com/github-production-repository-file-5c1aeb/465178219/8167812?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20221116%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20221116T140733Z&X-Amz-Expires=300&X-Amz-Signature=76eeee7ebc622d4dcb391a418d260d356fdf7a95e8ebe8409c7b799bdad19091&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=465178219&response-content-disposition=attachment%3Bfilename%3Ddata.zip&response-content-type=application%2Fzip [following]\n","--2022-11-16 14:07:33--  https://objects.githubusercontent.com/github-production-repository-file-5c1aeb/465178219/8167812?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20221116%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20221116T140733Z&X-Amz-Expires=300&X-Amz-Signature=76eeee7ebc622d4dcb391a418d260d356fdf7a95e8ebe8409c7b799bdad19091&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=465178219&response-content-disposition=attachment%3Bfilename%3Ddata.zip&response-content-type=application%2Fzip\n","Resolving objects.githubusercontent.com (objects.githubusercontent.com)... 185.199.110.133, 185.199.108.133, 185.199.109.133, ...\n","Connecting to objects.githubusercontent.com (objects.githubusercontent.com)|185.199.110.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 489509 (478K) [application/zip]\n","Saving to: ‘data.zip’\n","\n","data.zip            100%[===================>] 478.04K   414KB/s    in 1.2s    \n","\n","2022-11-16 14:07:35 (414 KB/s) - ‘data.zip’ saved [489509/489509]\n","\n","Archive:  ./data.zip\n","   creating: data/\n","   creating: data/deer/\n"," extracting: data/deer/deer13.png    \n"," extracting: data/deer/deer6.png     \n"," extracting: data/deer/deer11.png    \n"," extracting: data/deer/deer2.png     \n"," extracting: data/deer/deer10.png    \n"," extracting: data/deer/deer16.png    \n"," extracting: data/deer/deer9.png     \n"," extracting: data/deer/deer20.png    \n"," extracting: data/deer/deer15.png    \n"," extracting: data/deer/deer19.png    \n"," extracting: data/deer/deer5.png     \n"," extracting: data/deer/deer14.png    \n"," extracting: data/deer/deer4.png     \n"," extracting: data/deer/deer8.png     \n"," extracting: data/deer/deer12.png    \n"," extracting: data/deer/deer1.png     \n"," extracting: data/deer/deer7.png     \n"," extracting: data/deer/deer17.png    \n"," extracting: data/deer/deer18.png    \n"," extracting: data/deer/deer3.png     \n","   creating: data/horse/\n"," extracting: data/horse/horse9.png   \n"," extracting: data/horse/horse1.png   \n"," extracting: data/horse/horse16.png  \n"," extracting: data/horse/horse15.png  \n"," extracting: data/horse/horse19.png  \n"," extracting: data/horse/horse14.png  \n"," extracting: data/horse/horse10.png  \n"," extracting: data/horse/horse7.png   \n"," extracting: data/horse/horse2.png   \n"," extracting: data/horse/horse6.png   \n"," extracting: data/horse/horse20.png  \n"," extracting: data/horse/horse5.png   \n"," extracting: data/horse/horse18.png  \n"," extracting: data/horse/horse12.png  \n"," extracting: data/horse/horse13.png  \n"," extracting: data/horse/horse17.png  \n"," extracting: data/horse/horse4.png   \n"," extracting: data/horse/horse11.png  \n"," extracting: data/horse/horse8.png   \n"," extracting: data/horse/horse3.png   \n","   creating: data/ship/\n"," extracting: data/ship/ship10.png    \n"," extracting: data/ship/ship14.png    \n"," extracting: data/ship/ship9.png     \n"," extracting: data/ship/ship20.png    \n"," extracting: data/ship/ship5.png     \n"," extracting: data/ship/ship8.png     \n"," extracting: data/ship/ship19.png    \n"," extracting: data/ship/ship16.png    \n"," extracting: data/ship/ship13.png    \n"," extracting: data/ship/ship6.png     \n"," extracting: data/ship/ship17.png    \n"," extracting: data/ship/ship1.png     \n"," extracting: data/ship/ship12.png    \n"," extracting: data/ship/ship2.png     \n"," extracting: data/ship/ship3.png     \n"," extracting: data/ship/ship15.png    \n"," extracting: data/ship/ship4.png     \n"," extracting: data/ship/ship7.png     \n"," extracting: data/ship/ship11.png    \n"," extracting: data/ship/ship18.png    \n","   creating: data/frog/\n"," extracting: data/frog/frog10.png    \n"," extracting: data/frog/frog4.png     \n"," extracting: data/frog/frog5.png     \n"," extracting: data/frog/frog20.png    \n"," extracting: data/frog/frog15.png    \n"," extracting: data/frog/frog3.png     \n"," extracting: data/frog/frog1.png     \n"," extracting: data/frog/frog14.png    \n"," extracting: data/frog/frog2.png     \n"," extracting: data/frog/frog19.png    \n"," extracting: data/frog/frog7.png     \n"," extracting: data/frog/frog11.png    \n"," extracting: data/frog/frog17.png    \n"," extracting: data/frog/frog18.png    \n"," extracting: data/frog/frog12.png    \n"," extracting: data/frog/frog16.png    \n"," extracting: data/frog/frog8.png     \n"," extracting: data/frog/frog13.png    \n"," extracting: data/frog/frog6.png     \n"," extracting: data/frog/frog9.png     \n","   creating: data/airplane/\n"," extracting: data/airplane/airplane3.png  \n"," extracting: data/airplane/airplane4.png  \n"," extracting: data/airplane/airplane2.png  \n"," extracting: data/airplane/airplane9.png  \n"," extracting: data/airplane/airplane20.png  \n"," extracting: data/airplane/airplane18.png  \n"," extracting: data/airplane/airplane19.png  \n"," extracting: data/airplane/airplane10.png  \n"," extracting: data/airplane/airplane6.png  \n"," extracting: data/airplane/airplane13.png  \n"," extracting: data/airplane/airplane16.png  \n"," extracting: data/airplane/airplane14.png  \n"," extracting: data/airplane/airplane11.png  \n"," extracting: data/airplane/airplane1.png  \n"," extracting: data/airplane/airplane17.png  \n"," extracting: data/airplane/airplane7.png  \n"," extracting: data/airplane/airplane15.png  \n"," extracting: data/airplane/airplane5.png  \n"," extracting: data/airplane/airplane8.png  \n"," extracting: data/airplane/airplane12.png  \n","   creating: data/bird/\n"," extracting: data/bird/bird9.png     \n"," extracting: data/bird/bird12.png    \n"," extracting: data/bird/bird10.png    \n"," extracting: data/bird/bird11.png    \n"," extracting: data/bird/bird5.png     \n"," extracting: data/bird/bird8.png     \n"," extracting: data/bird/bird4.png     \n"," extracting: data/bird/bird3.png     \n"," extracting: data/bird/bird7.png     \n"," extracting: data/bird/bird18.png    \n"," extracting: data/bird/bird14.png    \n"," extracting: data/bird/bird13.png    \n"," extracting: data/bird/bird2.png     \n"," extracting: data/bird/bird15.png    \n"," extracting: data/bird/bird17.png    \n"," extracting: data/bird/bird19.png    \n"," extracting: data/bird/bird16.png    \n"," extracting: data/bird/bird6.png     \n"," extracting: data/bird/bird20.png    \n"," extracting: data/bird/bird1.png     \n","   creating: data/cat/\n"," extracting: data/cat/cat6.png       \n"," extracting: data/cat/cat1.png       \n"," extracting: data/cat/cat7.png       \n"," extracting: data/cat/cat19.png      \n"," extracting: data/cat/cat5.png       \n"," extracting: data/cat/cat9.png       \n"," extracting: data/cat/cat17.png      \n"," extracting: data/cat/cat2.png       \n"," extracting: data/cat/cat16.png      \n"," extracting: data/cat/cat10.png      \n"," extracting: data/cat/cat4.png       \n"," extracting: data/cat/cat18.png      \n"," extracting: data/cat/cat13.png      \n"," extracting: data/cat/cat11.png      \n"," extracting: data/cat/cat20.png      \n"," extracting: data/cat/cat15.png      \n"," extracting: data/cat/cat8.png       \n"," extracting: data/cat/cat14.png      \n"," extracting: data/cat/cat3.png       \n"," extracting: data/cat/cat12.png      \n","   creating: data/automobile/\n"," extracting: data/automobile/automobile17.png  \n"," extracting: data/automobile/automobile11.png  \n"," extracting: data/automobile/automobile5.png  \n"," extracting: data/automobile/automobile10.png  \n"," extracting: data/automobile/automobile20.png  \n"," extracting: data/automobile/automobile2.png  \n"," extracting: data/automobile/automobile6.png  \n"," extracting: data/automobile/automobile1.png  \n"," extracting: data/automobile/automobile19.png  \n"," extracting: data/automobile/automobile7.png  \n"," extracting: data/automobile/automobile16.png  \n"," extracting: data/automobile/automobile3.png  \n"," extracting: data/automobile/automobile14.png  \n"," extracting: data/automobile/automobile12.png  \n"," extracting: data/automobile/automobile9.png  \n"," extracting: data/automobile/automobile4.png  \n"," extracting: data/automobile/automobile8.png  \n"," extracting: data/automobile/automobile13.png  \n"," extracting: data/automobile/automobile18.png  \n"," extracting: data/automobile/automobile15.png  \n","   creating: data/dog/\n"," extracting: data/dog/dog9.png       \n"," extracting: data/dog/dog2.png       \n"," extracting: data/dog/dog15.png      \n"," extracting: data/dog/dog8.png       \n"," extracting: data/dog/dog3.png       \n"," extracting: data/dog/dog19.png      \n"," extracting: data/dog/dog12.png      \n"," extracting: data/dog/dog7.png       \n"," extracting: data/dog/dog17.png      \n"," extracting: data/dog/dog11.png      \n"," extracting: data/dog/dog16.png      \n"," extracting: data/dog/dog20.png      \n"," extracting: data/dog/dog4.png       \n"," extracting: data/dog/dog5.png       \n"," extracting: data/dog/dog14.png      \n"," extracting: data/dog/dog18.png      \n"," extracting: data/dog/dog10.png      \n"," extracting: data/dog/dog1.png       \n"," extracting: data/dog/dog13.png      \n"," extracting: data/dog/dog6.png       \n","   creating: data/truck/\n"," extracting: data/truck/truck1.png   \n"," extracting: data/truck/truck18.png  \n"," extracting: data/truck/truck9.png   \n"," extracting: data/truck/truck4.png   \n"," extracting: data/truck/truck14.png  \n"," extracting: data/truck/truck8.png   \n"," extracting: data/truck/truck12.png  \n"," extracting: data/truck/truck15.png  \n"," extracting: data/truck/truck2.png   \n"," extracting: data/truck/truck5.png   \n"," extracting: data/truck/truck3.png   \n"," extracting: data/truck/truck10.png  \n"," extracting: data/truck/truck17.png  \n"," extracting: data/truck/truck20.png  \n"," extracting: data/truck/truck19.png  \n"," extracting: data/truck/truck13.png  \n"," extracting: data/truck/truck7.png   \n"," extracting: data/truck/truck6.png   \n","  inflating: data/truck/truck16.png  \n"," extracting: data/truck/truck11.png  \n"]}],"source":["# set up environment\n","!pip install pytorchcv\n","!pip install imgaug\n","\n","# download\n","!wget https://github.com/DanielLin94144/ML-attack-dataset/files/8167812/data.zip\n","\n","# unzip\n","!unzip ./data.zip\n","!rm ./data.zip"]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","batch_size = 8"],"metadata":{"id":"5inbFx_alYjw","executionInfo":{"status":"ok","timestamp":1668607657879,"user_tz":-480,"elapsed":15,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}}},"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hkQQf0l1hbBs"},"source":["## Global Settings \n","#### **[NOTE]**: Don't change the settings here, or your generated image might not meet the constraint.\n","* $\\epsilon$ is fixed to be 8. But on **Data section**, we will first apply transforms on raw pixel value (0-255 scale) **by ToTensor (to 0-1 scale)** and then **Normalize (subtract mean divide std)**. $\\epsilon$ should be set to $\\frac{8}{255 * std}$ during attack.\n","\n","* Explaination (optional)\n","    * Denote the first pixel of original image as $p$, and the first pixel of adversarial image as $a$.\n","    * The $\\epsilon$ constraints tell us $\\left| p-a \\right| <= 8$.\n","    * ToTensor() can be seen as a function where $T(x) = x/255$.\n","    * Normalize() can be seen as a function where $N(x) = (x-mean)/std$ where $mean$ and $std$ are constants.\n","    * After applying ToTensor() and Normalize() on $p$ and $a$, the constraint becomes $\\left| N(T(p))-N(T(a)) \\right| = \\left| \\frac{\\frac{p}{255}-mean}{std}-\\frac{\\frac{a}{255}-mean}{std} \\right| = \\frac{1}{255 * std} \\left| p-a \\right| <= \\frac{8}{255 * std}.$\n","    * So, we should set $\\epsilon$ to be $\\frac{8}{255 * std}$ after ToTensor() and Normalize()."]},{"cell_type":"code","execution_count":17,"metadata":{"id":"ACghc_tsg2vE","executionInfo":{"status":"ok","timestamp":1668607657879,"user_tz":-480,"elapsed":14,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}}},"outputs":[],"source":["# the mean and std are the calculated statistics from cifar_10 dataset\n","cifar_10_mean = (0.491, 0.482, 0.447) # mean for the three channels of cifar_10 images\n","cifar_10_std = (0.202, 0.199, 0.201) # std for the three channels of cifar_10 images\n","\n","# convert mean and std to 3-dimensional tensors for future operations\n","mean = torch.tensor(cifar_10_mean).to(device).view(3, 1, 1)\n","std = torch.tensor(cifar_10_std).to(device).view(3, 1, 1)\n","\n","epsilon = 8/255/std"]},{"cell_type":"code","source":["root = './data' # directory for storing benign images\n","# benign images: images which do not contain adversarial perturbations\n","# adversarial images: images which include adversarial perturbations"],"metadata":{"id":"uO8f0NmtlM63","executionInfo":{"status":"ok","timestamp":1668607657880,"user_tz":-480,"elapsed":14,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lhBJBAlKherZ"},"source":["## Data\n","\n","Construct dataset and dataloader from root directory. Note that we store the filename of each image for future usage."]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VXpRAHz0hkDt","outputId":"7fdb1c41-50b6-4aff-a50f-66a6ba6d4b7a","executionInfo":{"status":"ok","timestamp":1668607657880,"user_tz":-480,"elapsed":14,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["number of images = 200\n"]}],"source":["import os\n","import glob\n","import shutil\n","import numpy as np\n","from PIL import Image\n","from torchvision.transforms import transforms\n","from torch.utils.data import Dataset, DataLoader\n","\n","transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize(cifar_10_mean, cifar_10_std)\n","])\n","\n","class AdvDataset(Dataset):\n","    def __init__(self, data_dir, transform):\n","        self.images = []\n","        self.labels = []\n","        self.names = []\n","        '''\n","        data_dir\n","        ├── class_dir\n","        │   ├── class1.png\n","        │   ├── ...\n","        │   ├── class20.png\n","        '''\n","        for i, class_dir in enumerate(sorted(glob.glob(f'{data_dir}/*'))):\n","            images = sorted(glob.glob(f'{class_dir}/*'))\n","            self.images += images\n","            self.labels += ([i] * len(images))\n","            self.names += [os.path.relpath(imgs, data_dir) for imgs in images]\n","        self.transform = transform\n","    def __getitem__(self, idx):\n","        image = self.transform(Image.open(self.images[idx]))\n","        label = self.labels[idx]\n","        return image, label\n","    def __getname__(self):\n","        return self.names\n","    def __len__(self):\n","        return len(self.images)\n","\n","adv_set = AdvDataset(root, transform=transform)\n","adv_names = adv_set.__getname__()\n","adv_loader = DataLoader(adv_set, batch_size=batch_size, shuffle=False)\n","\n","print(f'number of images = {adv_set.__len__()}')"]},{"cell_type":"markdown","metadata":{"id":"LnszlTsYrTQZ"},"source":["## Utils -- Benign Images Evaluation"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"5c_zZLzkrceE","executionInfo":{"status":"ok","timestamp":1668607657880,"user_tz":-480,"elapsed":7,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}}},"outputs":[],"source":["# to evaluate the performance of model on benign images\n","def epoch_benign(model, loader, loss_fn):\n","    model.eval()\n","    train_acc, train_loss = 0.0, 0.0\n","    for x, y in loader:\n","        x, y = x.to(device), y.to(device)\n","        yp = model(x)\n","        loss = loss_fn(yp, y)\n","        train_acc += (yp.argmax(dim=1) == y).sum().item()\n","        train_loss += loss.item() * x.shape[0]\n","    return train_acc / len(loader.dataset), train_loss / len(loader.dataset)"]},{"cell_type":"markdown","metadata":{"id":"_YJxK7YehqQy"},"source":["## Utils -- Attack Algorithm"]},{"cell_type":"code","execution_count":45,"metadata":{"id":"F_1wKfKyhrQW","executionInfo":{"status":"ok","timestamp":1668608646395,"user_tz":-480,"elapsed":455,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}}},"outputs":[],"source":["# perform fgsm attack\n","def fgsm(model, x, y, loss_fn, epsilon=epsilon):\n","    x_adv = x.detach().clone() # initialize x_adv as original benign image x\n","    x_adv.requires_grad = True # need to obtain gradient of x_adv, thus set required grad\n","    loss = loss_fn(model(x_adv), y) # calculate loss\n","    loss.backward() # calculate gradient\n","    # fgsm: use gradient ascent on x_adv to maximize loss\n","    grad = x_adv.grad.detach()\n","    x_adv = x_adv + epsilon * grad.sign()\n","    return x_adv\n","\n","# alpha and num_iter can be decided by yourself\n","alpha = 0.8/255/std\n","def ifgsm(model, x, y, loss_fn, epsilon=epsilon, alpha=alpha, num_iter=20):\n","    x_adv = x\n","    # write a loop of num_iter to represent the iterative times\n","    for i in range(num_iter):\n","        # x_adv = fgsm(model, x_adv, y, loss_fn, alpha) # call fgsm with (epsilon = alpha) to obtain new x_adv\n","        x_adv = x_adv.detach().clone()\n","\n","        x_adv.requires_grad = True # need to obtain gradient of x_adv, thus set required grad\n","        loss = loss_fn(model(x_adv), y) # calculate loss\n","        loss.backward() # calculate gradient\n","        # fgsm: use gradient ascent on x_adv to maximize loss\n","        grad = x_adv.grad.detach()\n","        x_adv = x_adv + alpha * grad.sign()\n","\n","        x_adv = torch.max(torch.min(x_adv, x+epsilon), x-epsilon) # clip new x_adv back to [x-epsilon, x+epsilon]\n","    return x_adv\n","\n","def mifgsm(model, x, y, loss_fn, epsilon=epsilon, alpha=alpha, num_iter=20, decay=1.0):\n","    x_adv = x\n","    # initialze momentum tensor\n","    momentum = torch.zeros_like(x).detach().to(device)#zero_like回傳和x size相同的matrix\n","    # write a loop of num_iter to represent the iterative times\n","    for i in range(num_iter):\n","        x_adv = x_adv.detach().clone()\n","        #requires_grad:記錄對x_adv做的gradient\n","        #dim mifgsm -> 要做image transformation\n","        if torch.rand(1).item() >= 0.5:\n","          rnd = torch.randint(29,33,(1,)).item() #隨機resize\n","          x_adv = transforms.Resize((rnd,rnd))(x_adv)\n","        #padding image to 32x32 with 0 (the original size)\n","        #randint:https://pytorch.org/docs/stable/generated/torch.randint.html\n","\n","          left = torch.randint(0,32-rnd+1,(1,)).item()\n","          top = torch.randint(0,32-rnd+1,(1,)).item()\n","          right = 32-rnd-left\n","          bottom = 32-rnd-top\n","          x_adv = transforms.Pad([left,top,right,bottom])(x_adv)\n","\n","\n","        x_adv.requires_grad = True # need to obtain gradient of x_adv, thus set required grad\n","        loss = loss_fn(model(x_adv), y) # calculate loss\n","        loss.backward() # calculate gradient\n","        # TODO: Momentum calculation\n","        # grad = .....\n","        grad = x_adv.grad.detach()\n","        grad = momentum*decay + grad/(grad.abs().sum()+1e-8)\n","        momentum = grad\n","        x_adv = x_adv + alpha * grad.sign()\n","        x_adv = torch.max(torch.min(x_adv, x+epsilon), x-epsilon) # clip new x_adv back to [x-epsilon, x+epsilon]\n","    return x_adv"]},{"cell_type":"markdown","metadata":{"id":"fYCEQwmcrmH6"},"source":["## Utils -- Attack\n","* Recall\n","  * ToTensor() can be seen as a function where $T(x) = x/255$.\n","  * Normalize() can be seen as a function where $N(x) = (x-mean)/std$ where $mean$ and $std$ are constants.\n","\n","* Inverse function\n","  * Inverse Normalize() can be seen as a function where $N^{-1}(x) = x*std+mean$ where $mean$ and $std$ are constants.\n","  * Inverse ToTensor() can be seen as a function where $T^{-1}(x) = x*255$.\n","\n","* Special Noted\n","  * ToTensor() will also convert the image from shape (height, width, channel) to shape (channel, height, width), so we also need to transpose the shape back to original shape.\n","  * Since our dataloader samples a batch of data, what we need here is to transpose **(batch_size, channel, height, width)** back to **(batch_size, height, width, channel)** using np.transpose."]},{"cell_type":"code","execution_count":22,"metadata":{"id":"w5X_9x-7ro_w","executionInfo":{"status":"ok","timestamp":1668607657880,"user_tz":-480,"elapsed":7,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}}},"outputs":[],"source":["# perform adversarial attack and generate adversarial examples\n","def gen_adv_examples(model, loader, attack, loss_fn):\n","    model.eval()\n","    adv_names = []\n","    train_acc, train_loss = 0.0, 0.0\n","    for i, (x, y) in enumerate(loader):\n","        x, y = x.to(device), y.to(device)\n","        #attack就是fgsm / ifgsm / mifgsm其中一種方法\n","        #以下選一種attck方式把noise加進原始資料x變成x_adv(adversarial)\n","        x_adv = attack(model, x, y, loss_fn) # obtain adversarial examples\n","        yp = model(x_adv)\n","        loss = loss_fn(yp, y) #maximize the loss!我們希望加入ｎｏｉｓｅ後model歸類出的yp可以和真實的y越不同越好\n","        train_acc += (yp.argmax(dim=1) == y).sum().item()\n","        train_loss += loss.item() * x.shape[0]\n","        # store adversarial examples\n","        adv_ex = ((x_adv) * std + mean).clamp(0, 1) # to 0-1 scale\n","        adv_ex = (adv_ex * 255).clamp(0, 255) # 0-255 scale\n","        adv_ex = adv_ex.detach().cpu().data.numpy().round() # round to remove decimal part\n","        adv_ex = adv_ex.transpose((0, 2, 3, 1)) # transpose (bs, C, H, W) back to (bs, H, W, C)\n","        adv_examples = adv_ex if i == 0 else np.r_[adv_examples, adv_ex]\n","    return adv_examples, train_acc / len(loader.dataset), train_loss / len(loader.dataset)\n","\n","# create directory which stores adversarial examples\n","def create_dir(data_dir, adv_dir, adv_examples, adv_names):\n","    if os.path.exists(adv_dir) is not True:\n","        _ = shutil.copytree(data_dir, adv_dir)\n","    for example, name in zip(adv_examples, adv_names):\n","        im = Image.fromarray(example.astype(np.uint8)) # image pixel value should be unsigned int\n","        im.save(os.path.join(adv_dir, name))"]},{"cell_type":"markdown","metadata":{"id":"r_pMkmPytX3k"},"source":["## Model / Loss Function\n","\n","Model list is available [here](https://github.com/osmr/imgclsmob/blob/master/pytorch/pytorchcv/model_provider.py). Please select models which has _cifar10 suffix. Some of the models cannot be accessed/loaded. You can safely skip them since TA's model will not use those kinds of models."]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jwto8xbPtYzQ","outputId":"72fc35b5-18ae-4ed8-e689-d62ee9a9ab54","executionInfo":{"status":"ok","timestamp":1668607659151,"user_tz":-480,"elapsed":1277,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["benign_acc = 0.95000, benign_loss = 0.22678\n"]}],"source":["from pytorchcv.model_provider import get_model as ptcv_get_model\n","\n","model = ptcv_get_model('resnet110_cifar10', pretrained=True).to(device)\n","loss_fn = nn.CrossEntropyLoss() #for yp and y\n","\n","benign_acc, benign_loss = epoch_benign(model, adv_loader, loss_fn)\n","print(f'benign_acc = {benign_acc:.5f}, benign_loss = {benign_loss:.5f}')"]},{"cell_type":"markdown","metadata":{"id":"uslb7GPchtMI"},"source":["## FGSM"]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wQwPTVUIhuTS","executionInfo":{"status":"ok","timestamp":1668607660117,"user_tz":-480,"elapsed":968,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}},"outputId":"cf3eea22-6bf4-46b9-ebe2-9fd19a2f5528"},"outputs":[{"output_type":"stream","name":"stdout","text":["fgsm_acc = 0.59000, fgsm_loss = 2.49186\n"]}],"source":["adv_examples, fgsm_acc, fgsm_loss = gen_adv_examples(model, adv_loader, fgsm, loss_fn)\n","print(f'fgsm_acc = {fgsm_acc:.5f}, fgsm_loss = {fgsm_loss:.5f}')\n","\n","create_dir(root, 'fgsm', adv_examples, adv_names)"]},{"cell_type":"markdown","metadata":{"id":"WXw6p0A6shZm"},"source":["## I-FGSM"]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fUEsT06Iskt2","executionInfo":{"status":"ok","timestamp":1668608023502,"user_tz":-480,"elapsed":11107,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}},"outputId":"587f8e95-23a9-4f4a-9ac8-04ebca69b06f"},"outputs":[{"output_type":"stream","name":"stdout","text":["ifgsm_acc = 0.00000, ifgsm_loss = 13.40013\n"]}],"source":["adv_examples, ifgsm_acc, ifgsm_loss = gen_adv_examples(ensemble_model, adv_loader, ifgsm, loss_fn)\n","print(f'ifgsm_acc = {ifgsm_acc:.5f}, ifgsm_loss = {ifgsm_loss:.5f}')\n","\n","create_dir(root, 'ifgsm', adv_examples, adv_names)"]},{"cell_type":"markdown","source":["### DIM_MIFGSM"],"metadata":{"id":"sNZzBz2uzNuZ"}},{"cell_type":"code","source":["adv_examples, dim_mifgsm_acc, dim_mifgsm_loss = gen_adv_examples(ensemble_model, adv_loader, mifgsm, loss_fn)\n","print(f'dim_mifgsm_acc = {dim_mifgsm_acc:.5f}, dim_mifgsm_loss = {dim_mifgsm_loss:.5f}')\n","\n","create_dir(root, 'xifgsm', adv_examples, adv_names)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b84owyUTrVs2","executionInfo":{"status":"ok","timestamp":1668608667856,"user_tz":-480,"elapsed":10656,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}},"outputId":"a369821e-204c-4a58-d040-dd4744d974b8"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["dim_mifgsm_acc = 0.57500, dim_mifgsm_loss = 1.97733\n"]}]},{"cell_type":"markdown","metadata":{"id":"DQ-nYkkYexEE"},"source":["## Compress the images\n","* Submit the .tgz file to [JudgeBoi](https://ml.ee.ntu.edu.tw/hw10/)"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ItRo_S0M264N","executionInfo":{"status":"ok","timestamp":1668607691206,"user_tz":-480,"elapsed":21,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}},"outputId":"fbdf121d-05d9-4326-bef7-4dbc4f78ca23"},"outputs":[{"output_type":"stream","name":"stdout","text":["/fgsm\n","airplane/\n","airplane/airplane3.png\n","airplane/airplane11.png\n","airplane/airplane13.png\n","airplane/airplane6.png\n","airplane/airplane12.png\n","airplane/airplane10.png\n","airplane/airplane8.png\n","airplane/airplane19.png\n","airplane/airplane2.png\n","airplane/airplane16.png\n","airplane/airplane9.png\n","airplane/airplane7.png\n","airplane/airplane20.png\n","airplane/airplane17.png\n","airplane/airplane5.png\n","airplane/airplane4.png\n","airplane/airplane18.png\n","airplane/airplane15.png\n","airplane/airplane1.png\n","airplane/airplane14.png\n","automobile/\n","automobile/automobile6.png\n","automobile/automobile13.png\n","automobile/automobile10.png\n","automobile/automobile2.png\n","automobile/automobile3.png\n","automobile/automobile15.png\n","automobile/automobile1.png\n","automobile/automobile18.png\n","automobile/automobile14.png\n","automobile/automobile5.png\n","automobile/automobile16.png\n","automobile/automobile4.png\n","automobile/automobile7.png\n","automobile/automobile11.png\n","automobile/automobile9.png\n","automobile/automobile17.png\n","automobile/automobile20.png\n","automobile/automobile19.png\n","automobile/automobile8.png\n","automobile/automobile12.png\n","bird/\n","bird/bird11.png\n","bird/bird13.png\n","bird/bird18.png\n","bird/bird20.png\n","bird/bird16.png\n","bird/bird8.png\n","bird/bird10.png\n","bird/bird5.png\n","bird/bird19.png\n","bird/bird3.png\n","bird/bird14.png\n","bird/bird1.png\n","bird/bird2.png\n","bird/bird7.png\n","bird/bird6.png\n","bird/bird12.png\n","bird/bird4.png\n","bird/bird17.png\n","bird/bird9.png\n","bird/bird15.png\n","cat/\n","cat/cat10.png\n","cat/cat16.png\n","cat/cat3.png\n","cat/cat15.png\n","cat/cat20.png\n","cat/cat8.png\n","cat/cat13.png\n","cat/cat17.png\n","cat/cat6.png\n","cat/cat5.png\n","cat/cat7.png\n","cat/cat9.png\n","cat/cat2.png\n","cat/cat4.png\n","cat/cat12.png\n","cat/cat19.png\n","cat/cat1.png\n","cat/cat11.png\n","cat/cat14.png\n","cat/cat18.png\n","deer/\n","deer/deer20.png\n","deer/deer7.png\n","deer/deer9.png\n","deer/deer11.png\n","deer/deer2.png\n","deer/deer8.png\n","deer/deer13.png\n","deer/deer18.png\n","deer/deer1.png\n","deer/deer12.png\n","deer/deer6.png\n","deer/deer5.png\n","deer/deer15.png\n","deer/deer3.png\n","deer/deer16.png\n","deer/deer17.png\n","deer/deer10.png\n","deer/deer14.png\n","deer/deer19.png\n","deer/deer4.png\n","dog/\n","dog/dog17.png\n","dog/dog9.png\n","dog/dog1.png\n","dog/dog11.png\n","dog/dog5.png\n","dog/dog7.png\n","dog/dog19.png\n","dog/dog20.png\n","dog/dog6.png\n","dog/dog2.png\n","dog/dog10.png\n","dog/dog3.png\n","dog/dog12.png\n","dog/dog15.png\n","dog/dog14.png\n","dog/dog4.png\n","dog/dog18.png\n","dog/dog8.png\n","dog/dog16.png\n","dog/dog13.png\n","frog/\n","frog/frog4.png\n","frog/frog20.png\n","frog/frog8.png\n","frog/frog16.png\n","frog/frog11.png\n","frog/frog13.png\n","frog/frog19.png\n","frog/frog14.png\n","frog/frog2.png\n","frog/frog15.png\n","frog/frog7.png\n","frog/frog18.png\n","frog/frog3.png\n","frog/frog10.png\n","frog/frog6.png\n","frog/frog9.png\n","frog/frog1.png\n","frog/frog5.png\n","frog/frog12.png\n","frog/frog17.png\n","horse/\n","horse/horse1.png\n","horse/horse15.png\n","horse/horse5.png\n","horse/horse11.png\n","horse/horse6.png\n","horse/horse20.png\n","horse/horse9.png\n","horse/horse17.png\n","horse/horse7.png\n","horse/horse19.png\n","horse/horse13.png\n","horse/horse10.png\n","horse/horse3.png\n","horse/horse4.png\n","horse/horse16.png\n","horse/horse14.png\n","horse/horse8.png\n","horse/horse18.png\n","horse/horse12.png\n","horse/horse2.png\n","ship/\n","ship/ship4.png\n","ship/ship8.png\n","ship/ship6.png\n","ship/ship15.png\n","ship/ship12.png\n","ship/ship17.png\n","ship/ship9.png\n","ship/ship14.png\n","ship/ship3.png\n","ship/ship11.png\n","ship/ship13.png\n","ship/ship18.png\n","ship/ship10.png\n","ship/ship16.png\n","ship/ship19.png\n","ship/ship7.png\n","ship/ship20.png\n","ship/ship2.png\n","ship/ship1.png\n","ship/ship5.png\n","truck/\n","truck/truck14.png\n","truck/truck12.png\n","truck/truck13.png\n","truck/truck18.png\n","truck/truck7.png\n","truck/truck19.png\n","truck/truck8.png\n","truck/truck6.png\n","truck/truck15.png\n","truck/truck5.png\n","truck/truck1.png\n","truck/truck3.png\n","truck/truck17.png\n","truck/truck9.png\n","truck/truck20.png\n","truck/truck16.png\n","truck/truck11.png\n","truck/truck10.png\n","truck/truck2.png\n","truck/truck4.png\n","/\n","/ifgsm\n","airplane/\n","airplane/airplane3.png\n","airplane/airplane11.png\n","airplane/airplane13.png\n","airplane/airplane6.png\n","airplane/airplane12.png\n","airplane/airplane10.png\n","airplane/airplane8.png\n","airplane/airplane19.png\n","airplane/airplane2.png\n","airplane/airplane16.png\n","airplane/airplane9.png\n","airplane/airplane7.png\n","airplane/airplane20.png\n","airplane/airplane17.png\n","airplane/airplane5.png\n","airplane/airplane4.png\n","airplane/airplane18.png\n","airplane/airplane15.png\n","airplane/airplane1.png\n","airplane/airplane14.png\n","automobile/\n","automobile/automobile6.png\n","automobile/automobile13.png\n","automobile/automobile10.png\n","automobile/automobile2.png\n","automobile/automobile3.png\n","automobile/automobile15.png\n","automobile/automobile1.png\n","automobile/automobile18.png\n","automobile/automobile14.png\n","automobile/automobile5.png\n","automobile/automobile16.png\n","automobile/automobile4.png\n","automobile/automobile7.png\n","automobile/automobile11.png\n","automobile/automobile9.png\n","automobile/automobile17.png\n","automobile/automobile20.png\n","automobile/automobile19.png\n","automobile/automobile8.png\n","automobile/automobile12.png\n","bird/\n","bird/bird11.png\n","bird/bird13.png\n","bird/bird18.png\n","bird/bird20.png\n","bird/bird16.png\n","bird/bird8.png\n","bird/bird10.png\n","bird/bird5.png\n","bird/bird19.png\n","bird/bird3.png\n","bird/bird14.png\n","bird/bird1.png\n","bird/bird2.png\n","bird/bird7.png\n","bird/bird6.png\n","bird/bird12.png\n","bird/bird4.png\n","bird/bird17.png\n","bird/bird9.png\n","bird/bird15.png\n","cat/\n","cat/cat10.png\n","cat/cat16.png\n","cat/cat3.png\n","cat/cat15.png\n","cat/cat20.png\n","cat/cat8.png\n","cat/cat13.png\n","cat/cat17.png\n","cat/cat6.png\n","cat/cat5.png\n","cat/cat7.png\n","cat/cat9.png\n","cat/cat2.png\n","cat/cat4.png\n","cat/cat12.png\n","cat/cat19.png\n","cat/cat1.png\n","cat/cat11.png\n","cat/cat14.png\n","cat/cat18.png\n","deer/\n","deer/deer20.png\n","deer/deer7.png\n","deer/deer9.png\n","deer/deer11.png\n","deer/deer2.png\n","deer/deer8.png\n","deer/deer13.png\n","deer/deer18.png\n","deer/deer1.png\n","deer/deer12.png\n","deer/deer6.png\n","deer/deer5.png\n","deer/deer15.png\n","deer/deer3.png\n","deer/deer16.png\n","deer/deer17.png\n","deer/deer10.png\n","deer/deer14.png\n","deer/deer19.png\n","deer/deer4.png\n","dog/\n","dog/dog17.png\n","dog/dog9.png\n","dog/dog1.png\n","dog/dog11.png\n","dog/dog5.png\n","dog/dog7.png\n","dog/dog19.png\n","dog/dog20.png\n","dog/dog6.png\n","dog/dog2.png\n","dog/dog10.png\n","dog/dog3.png\n","dog/dog12.png\n","dog/dog15.png\n","dog/dog14.png\n","dog/dog4.png\n","dog/dog18.png\n","dog/dog8.png\n","dog/dog16.png\n","dog/dog13.png\n","frog/\n","frog/frog4.png\n","frog/frog20.png\n","frog/frog8.png\n","frog/frog16.png\n","frog/frog11.png\n","frog/frog13.png\n","frog/frog19.png\n","frog/frog14.png\n","frog/frog2.png\n","frog/frog15.png\n","frog/frog7.png\n","frog/frog18.png\n","frog/frog3.png\n","frog/frog10.png\n","frog/frog6.png\n","frog/frog9.png\n","frog/frog1.png\n","frog/frog5.png\n","frog/frog12.png\n","frog/frog17.png\n","horse/\n","horse/horse1.png\n","horse/horse15.png\n","horse/horse5.png\n","horse/horse11.png\n","horse/horse6.png\n","horse/horse20.png\n","horse/horse9.png\n","horse/horse17.png\n","horse/horse7.png\n","horse/horse19.png\n","horse/horse13.png\n","horse/horse10.png\n","horse/horse3.png\n","horse/horse4.png\n","horse/horse16.png\n","horse/horse14.png\n","horse/horse8.png\n","horse/horse18.png\n","horse/horse12.png\n","horse/horse2.png\n","ship/\n","ship/ship4.png\n","ship/ship8.png\n","ship/ship6.png\n","ship/ship15.png\n","ship/ship12.png\n","ship/ship17.png\n","ship/ship9.png\n","ship/ship14.png\n","ship/ship3.png\n","ship/ship11.png\n","ship/ship13.png\n","ship/ship18.png\n","ship/ship10.png\n","ship/ship16.png\n","ship/ship19.png\n","ship/ship7.png\n","ship/ship20.png\n","ship/ship2.png\n","ship/ship1.png\n","ship/ship5.png\n","truck/\n","truck/truck14.png\n","truck/truck12.png\n","truck/truck13.png\n","truck/truck18.png\n","truck/truck7.png\n","truck/truck19.png\n","truck/truck8.png\n","truck/truck6.png\n","truck/truck15.png\n","truck/truck5.png\n","truck/truck1.png\n","truck/truck3.png\n","truck/truck17.png\n","truck/truck9.png\n","truck/truck20.png\n","truck/truck16.png\n","truck/truck11.png\n","truck/truck10.png\n","truck/truck2.png\n","truck/truck4.png\n","/\n"]}],"source":["%cd fgsm\n","!tar zcvf ../fgsm.tgz *\n","%cd ..\n","\n","%cd ifgsm\n","!tar zcvf ../ifgsm.tgz *\n","%cd .."]},{"cell_type":"markdown","source":["## Example of Ensemble Attack\n","* Ensemble multiple models as your proxy model to increase the black-box transferability ([paper](https://arxiv.org/abs/1611.02770))"],"metadata":{"id":"WLZLbebigCA2"}},{"cell_type":"markdown","source":["### ensemble methods\n","\n","根据文章Query-Free Adversarial Transfer via Undertrained Surrogates（https://arxiv.org/abs/2007.00806）\n","\n","描述，可以选择一些训练不充分的模型，训练不充分的意思包括两方面：一是模型的训练epoch少，二是模型在验证集（val set）未达到最小loss。我们依据论文中的一个例子，使用https://github.com/kuangliu/pytorch-cifar\n","\n","中的训练方法，选择resnet18模型，训练30个epoch（正常训练到达最好结果大约需要200个epoch"],"metadata":{"id":"DVb4Gu34m6Yn"}},{"cell_type":"code","source":["class ensembleNet(nn.Module):\n","    def __init__(self, model_names):\n","        super().__init__()\n","        self.models = nn.ModuleList([ptcv_get_model(name, pretrained=True) for name in model_names])\n","        \n","    def forward(self, x):\n","        esemble_logits = None #記錄一連串model的輸出logits(要丟進softmax之前的向量)，這一串logit就會是我們想攻擊的對象\n","        #m會load一連串的model,把資料x丟進去\n","        for i, m in enumerate(self.models):\n","          esemble_logits = m(x) if i==0 else esemble_logits+m(x)\n","        return esemble_logits/len(self.models)\n","          \n","        # TODO: sum up logits from multiple models  \n","        # return ensemble_logits"],"metadata":{"id":"gJcKiQNUgnPQ","executionInfo":{"status":"ok","timestamp":1668607691207,"user_tz":-480,"elapsed":14,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}}},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":["* Construct your ensemble model"],"metadata":{"id":"yjfJwJKeeaR2"}},{"cell_type":"markdown","source":[],"metadata":{"id":"hsa9cgQ1rzdz"}},{"cell_type":"code","source":["model_names = [ #這裡是一系列用cifar dataset pretrained過的模型，和助教的model用一樣的資料集\n","                 #因為我們並不知道助教真實model的參數（黑箱攻擊），只能使用這些model當作proxy來訓練\n","    'nin_cifar10',\n","    'resnet20_cifar10',\n","    'preresnet20_cifar10'\n","]\n","ensemble_model = ensembleNet(model_names).to(device)\n","ensemble_model.eval() "],"metadata":{"id":"stYFytogeIzI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668607691207,"user_tz":-480,"elapsed":14,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}},"outputId":"5f6bf5eb-1eea-46fd-f2e4-092ccf036021"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ensembleNet(\n","  (models): ModuleList(\n","    (0): CIFARNIN(\n","      (features): Sequential(\n","        (stage1): Sequential(\n","          (unit1): NINConv(\n","            (conv): Conv2d(3, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n","            (activ): ReLU(inplace=True)\n","          )\n","          (unit2): NINConv(\n","            (conv): Conv2d(192, 160, kernel_size=(1, 1), stride=(1, 1))\n","            (activ): ReLU(inplace=True)\n","          )\n","          (unit3): NINConv(\n","            (conv): Conv2d(160, 96, kernel_size=(1, 1), stride=(1, 1))\n","            (activ): ReLU(inplace=True)\n","          )\n","        )\n","        (stage2): Sequential(\n","          (pool2): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","          (dropout2): Dropout(p=0.5, inplace=False)\n","          (unit1): NINConv(\n","            (conv): Conv2d(96, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n","            (activ): ReLU(inplace=True)\n","          )\n","          (unit2): NINConv(\n","            (conv): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))\n","            (activ): ReLU(inplace=True)\n","          )\n","          (unit3): NINConv(\n","            (conv): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))\n","            (activ): ReLU(inplace=True)\n","          )\n","        )\n","        (stage3): Sequential(\n","          (pool3): AvgPool2d(kernel_size=3, stride=2, padding=1)\n","          (dropout3): Dropout(p=0.5, inplace=False)\n","          (unit1): NINConv(\n","            (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","            (activ): ReLU(inplace=True)\n","          )\n","          (unit2): NINConv(\n","            (conv): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1))\n","            (activ): ReLU(inplace=True)\n","          )\n","        )\n","      )\n","      (output): Sequential(\n","        (final_conv): NINConv(\n","          (conv): Conv2d(192, 10, kernel_size=(1, 1), stride=(1, 1))\n","          (activ): ReLU(inplace=True)\n","        )\n","        (final_pool): AvgPool2d(kernel_size=8, stride=1, padding=0)\n","      )\n","    )\n","    (1): CIFARResNet(\n","      (features): Sequential(\n","        (init_block): ConvBlock(\n","          (conv): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (activ): ReLU(inplace=True)\n","        )\n","        (stage1): Sequential(\n","          (unit1): ResUnit(\n","            (body): ResBlock(\n","              (conv1): ConvBlock(\n","                (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","              )\n","              (conv2): ConvBlock(\n","                (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              )\n","            )\n","            (activ): ReLU(inplace=True)\n","          )\n","          (unit2): ResUnit(\n","            (body): ResBlock(\n","              (conv1): ConvBlock(\n","                (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","              )\n","              (conv2): ConvBlock(\n","                (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              )\n","            )\n","            (activ): ReLU(inplace=True)\n","          )\n","          (unit3): ResUnit(\n","            (body): ResBlock(\n","              (conv1): ConvBlock(\n","                (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","              )\n","              (conv2): ConvBlock(\n","                (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              )\n","            )\n","            (activ): ReLU(inplace=True)\n","          )\n","        )\n","        (stage2): Sequential(\n","          (unit1): ResUnit(\n","            (body): ResBlock(\n","              (conv1): ConvBlock(\n","                (conv): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","              )\n","              (conv2): ConvBlock(\n","                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              )\n","            )\n","            (identity_conv): ConvBlock(\n","              (conv): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            )\n","            (activ): ReLU(inplace=True)\n","          )\n","          (unit2): ResUnit(\n","            (body): ResBlock(\n","              (conv1): ConvBlock(\n","                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","              )\n","              (conv2): ConvBlock(\n","                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              )\n","            )\n","            (activ): ReLU(inplace=True)\n","          )\n","          (unit3): ResUnit(\n","            (body): ResBlock(\n","              (conv1): ConvBlock(\n","                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","              )\n","              (conv2): ConvBlock(\n","                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              )\n","            )\n","            (activ): ReLU(inplace=True)\n","          )\n","        )\n","        (stage3): Sequential(\n","          (unit1): ResUnit(\n","            (body): ResBlock(\n","              (conv1): ConvBlock(\n","                (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","              )\n","              (conv2): ConvBlock(\n","                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              )\n","            )\n","            (identity_conv): ConvBlock(\n","              (conv): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            )\n","            (activ): ReLU(inplace=True)\n","          )\n","          (unit2): ResUnit(\n","            (body): ResBlock(\n","              (conv1): ConvBlock(\n","                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","              )\n","              (conv2): ConvBlock(\n","                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              )\n","            )\n","            (activ): ReLU(inplace=True)\n","          )\n","          (unit3): ResUnit(\n","            (body): ResBlock(\n","              (conv1): ConvBlock(\n","                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","              )\n","              (conv2): ConvBlock(\n","                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              )\n","            )\n","            (activ): ReLU(inplace=True)\n","          )\n","        )\n","        (final_pool): AvgPool2d(kernel_size=8, stride=1, padding=0)\n","      )\n","      (output): Linear(in_features=64, out_features=10, bias=True)\n","    )\n","    (2): CIFARPreResNet(\n","      (features): Sequential(\n","        (init_block): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","        (stage1): Sequential(\n","          (unit1): PreResUnit(\n","            (body): PreResBlock(\n","              (conv1): PreConvBlock(\n","                (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","              (conv2): PreConvBlock(\n","                (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","            )\n","          )\n","          (unit2): PreResUnit(\n","            (body): PreResBlock(\n","              (conv1): PreConvBlock(\n","                (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","              (conv2): PreConvBlock(\n","                (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","            )\n","          )\n","          (unit3): PreResUnit(\n","            (body): PreResBlock(\n","              (conv1): PreConvBlock(\n","                (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","              (conv2): PreConvBlock(\n","                (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","            )\n","          )\n","        )\n","        (stage2): Sequential(\n","          (unit1): PreResUnit(\n","            (body): PreResBlock(\n","              (conv1): PreConvBlock(\n","                (bn): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","              )\n","              (conv2): PreConvBlock(\n","                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","            )\n","            (identity_conv): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","          )\n","          (unit2): PreResUnit(\n","            (body): PreResBlock(\n","              (conv1): PreConvBlock(\n","                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","              (conv2): PreConvBlock(\n","                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","            )\n","          )\n","          (unit3): PreResUnit(\n","            (body): PreResBlock(\n","              (conv1): PreConvBlock(\n","                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","              (conv2): PreConvBlock(\n","                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","            )\n","          )\n","        )\n","        (stage3): Sequential(\n","          (unit1): PreResUnit(\n","            (body): PreResBlock(\n","              (conv1): PreConvBlock(\n","                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","              )\n","              (conv2): PreConvBlock(\n","                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","            )\n","            (identity_conv): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","          )\n","          (unit2): PreResUnit(\n","            (body): PreResBlock(\n","              (conv1): PreConvBlock(\n","                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","              (conv2): PreConvBlock(\n","                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","            )\n","          )\n","          (unit3): PreResUnit(\n","            (body): PreResBlock(\n","              (conv1): PreConvBlock(\n","                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","              (conv2): PreConvBlock(\n","                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (activ): ReLU(inplace=True)\n","                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","              )\n","            )\n","          )\n","        )\n","        (post_activ): PreResActivation(\n","          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (activ): ReLU(inplace=True)\n","        )\n","        (final_pool): AvgPool2d(kernel_size=8, stride=1, padding=0)\n","      )\n","      (output): Linear(in_features=64, out_features=10, bias=True)\n","    )\n","  )\n",")"]},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","source":["### dim_mifgsm\n"],"metadata":{"id":"Kpe1EJOUr09I"}},{"cell_type":"code","source":["adv_examples, dim_mifgsm_acc, dim_mifgsm_loss = gen_adv_examples(ensemble_model, adv_loader, mifgsm, loss_fn)\n","print(f'dim_mifgsm_acc = {dim_mifgsm_acc:.5f}, dim_mifgsm_loss = {dim_mifgsm_loss:.5f}')\n","\n","create_dir(root, 'xifgsm', adv_examples, adv_names)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KjQuV6fJriHp","executionInfo":{"status":"ok","timestamp":1668607919000,"user_tz":-480,"elapsed":11354,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}},"outputId":"92505716-356c-486c-af0f-3e929fc8eeb2"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["dim_mifgsm_acc = 0.83500, dim_mifgsm_loss = 0.45891\n"]}]},{"cell_type":"markdown","metadata":{"id":"0FM_S886kFd8"},"source":["## Visualization"]},{"cell_type":"code","execution_count":44,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":655},"id":"2FCuE2njkH1O","executionInfo":{"status":"ok","timestamp":1668608532996,"user_tz":-480,"elapsed":3374,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}},"outputId":"5bff90ce-b67c-4878-d704-66092c1448a5"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x1440 with 20 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["import matplotlib.pyplot as plt\n","\n","classes = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']\n","\n","plt.figure(figsize=(10, 20))\n","cnt = 0\n","for i, cls_name in enumerate(classes):\n","    path = f'{cls_name}/{cls_name}1.png'\n","    # benign image\n","    cnt += 1\n","    plt.subplot(len(classes), 4, cnt)\n","    im = Image.open(f'./data/{path}')\n","    logit = model(transform(im).unsqueeze(0).to(device))[0]\n","    predict = logit.argmax(-1).item()\n","    prob = logit.softmax(-1)[predict].item()\n","    plt.title(f'benign: {cls_name}1.png\\n{classes[predict]}: {prob:.2%}')\n","    plt.axis('off')\n","    plt.imshow(np.array(im))\n","    # adversarial image\n","    cnt += 1\n","    plt.subplot(len(classes), 4, cnt)\n","    im = Image.open(f'./xifgsm/{path}')\n","    logit = model(transform(im).unsqueeze(0).to(device))[0]\n","    predict = logit.argmax(-1).item()\n","    prob = logit.softmax(-1)[predict].item()\n","    plt.title(f'adversarial: {cls_name}1.png\\n{classes[predict]}: {prob:.2%}')\n","    plt.axis('off')\n","    plt.imshow(np.array(im))\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"markdown","source":["## Report Question\n","* Make sure you follow below setup: the source model is \"resnet110_cifar10\", applying the vanilla fgsm attack on `dog2.png`. You can find the perturbed image in `fgsm/dog2.png`."],"metadata":{"id":"FUmKa02Vmp29"}},{"cell_type":"code","execution_count":31,"metadata":{"id":"8NW8ntCKY3VY","colab":{"base_uri":"https://localhost:8080/","height":577},"executionInfo":{"status":"ok","timestamp":1668607704450,"user_tz":-480,"elapsed":1309,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}},"outputId":"53ae3bac-4b6c-4414-eb78-6d61baf5dd91"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# original image\n","path = f'dog/dog2.png'\n","im = Image.open(f'./data/{path}')\n","logit = model(transform(im).unsqueeze(0).to(device))[0]\n","predict = logit.argmax(-1).item()\n","prob = logit.softmax(-1)[predict].item()\n","plt.title(f'benign: dog2.png\\n{classes[predict]}: {prob:.2%}')\n","plt.axis('off')\n","plt.imshow(np.array(im))\n","plt.tight_layout()\n","plt.show()\n","\n","# adversarial image \n","adv_im = Image.open(f'./fgsm/{path}')\n","logit = model(transform(adv_im).unsqueeze(0).to(device))[0]\n","predict = logit.argmax(-1).item()\n","prob = logit.softmax(-1)[predict].item()\n","plt.title(f'adversarial: dog2.png\\n{classes[predict]}: {prob:.2%}')\n","plt.axis('off')\n","plt.imshow(np.array(adv_im))\n","plt.tight_layout()\n","plt.show()\n"]},{"cell_type":"markdown","source":["## Passive Defense - JPEG compression\n","JPEG compression by imgaug package, compression rate set to 70\n","\n","Reference: https://imgaug.readthedocs.io/en/latest/source/api_augmenters_arithmetic.html#imgaug.augmenters.arithmetic.JpegCompression"],"metadata":{"id":"2AQkofrTnePa"}},{"cell_type":"code","source":["import imgaug.augmenters as iaa\n","\n","# pre-process image\n","x = transforms.ToTensor()(adv_im)*255\n","x = x.permute(1, 2, 0).numpy()\n","x = x.astype(np.uint8)\n","\n","# TODO: use \"imgaug\" package to perform JPEG compression (compression rate = 70)\n","# compressed_x =  ... x .. \n","\n","logit = model(transform(compressed_x).unsqueeze(0).to(device))[0]\n","predict = logit.argmax(-1).item()\n","prob = logit.softmax(-1)[predict].item()\n","plt.title(f'JPEG adversarial: dog2.png\\n{classes[predict]}: {prob:.2%}')\n","plt.axis('off')\n","\n","\n","plt.imshow(compressed_x)\n","plt.tight_layout()\n","plt.show()"],"metadata":{"id":"sKuQaPp2mz7C","colab":{"base_uri":"https://localhost:8080/","height":280},"executionInfo":{"status":"error","timestamp":1668607736602,"user_tz":-480,"elapsed":673,"user":{"displayName":"肇綺筠","userId":"00719410413703682557"}},"outputId":"abce0118-cd39-4ce6-fa98-e6f5da71bbc5"},"execution_count":33,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-3792a8d5cb69>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# compressed_x =  ... x ..\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mlogit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcompressed_x\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munsqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0mpredict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlogit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mprob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlogit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msoftmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'compressed_x' is not defined"]}]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1BcYS4bAInDCTo4Ilsc6w4o_SEoFTuHSO","timestamp":1668598740833},{"file_id":"https://github.com/ga642381/ML2021-Spring/blob/main/HW10/HW10.ipynb","timestamp":1642931250038}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}